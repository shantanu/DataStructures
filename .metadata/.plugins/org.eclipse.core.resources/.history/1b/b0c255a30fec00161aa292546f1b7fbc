package Pset3;

public class DLLStatic {
	// PROBLEM 3
	public static DLLNode moveToFront(DLLNode front, DLLNode target) {
		while (target.prev != null) {
			DLLNode swapNode = target.prev;
			target.prev = swapNode.prev;
			target.prev.next = target;
			swapNode.prev = target;
			swapNode.next = target.next;
			if (target.next != null) {
				target.next.prev = swapNode;

			}
			target.next = swapNode;
		}
		return target;
	}
	//PROBLEM 4
	public static DLLNode reverse(DLLNode front) {
		if (front == null) 
			return null;
		
		for (DLLNode n = front; n != null; n = n.prev) {
			DLLNode tmp = n.prev;
			n.prev = n.next;
			n.next = tmp;
			if (n.prev == null) {
				return n;
			}
		}
		return null;
	}
	//PROBLEM 5
	public static Node deleteAll(Node front, String target) {
		if (front == null)
			return null;
		if (front.data.equals(target)) {
			return deleteAll(front.next, target);
		}
		else {
			front.next = deleteAll(front.next, target);
			return front;
		}
	}
	//PROBLEM 6
	public static IntNode merge(IntNode frontL1, IntNode frontL2) {
		static IntNode sortedHead = null;
		static IntNode sortedTail = null;
		if (sortedHead == null) {
			if (frontL1.data == frontL2.data) {
				sortedHead = frontL1;
				frontL1 = frontL1.next;
				sortedHead.next = frontL2;
				sortedTail = frontL2;
				frontL2 = frontL2.next;
			}
			else if (frontL1.data > frontL2.data) {
				sortedHead = frontL2;
				sortedTail = frontL2;
				frontL2 = frontL2.next;
			}
			else {
				sortedHead = frontL1;
				sortedTail = frontL1;
				frontL1 = frontL1.next;
			}
			
		}
	}
	
}
